import { Application, Router, send } from './mod.ts';
import { DB } from "https://deno.land/x/sqlite/mod.ts";
class Model {
    db;
    constructor(db) {
        this.db = db;
    }
    createTable() {
        this.db.query(`CREATE TABLE IF NOT EXISTS people
                       (
                           id       INTEGER PRIMARY KEY AUTOINCREMENT,
                           name     TEXT,
                           password TEXT default ''
                       );`);
    }
    addData() {
        [{ name: "huey", password: "hhh" },
            { name: "dewey", password: "ddd" },
            { name: "louie", password: "lll" }].map((person) => this.db.query("INSERT INTO people (name, password) VALUES (?, ?)", [person.name, person.password]));
    }
    outputData() {
        const data = this.db.query("SELECT name, password FROM people");
        for (const [name, password] of data) {
            console.log(name, password);
        }
    }
}
const db = new DB("demo.db");
const m = new Model(db);
m.createTable();
m.addData();
m.outputData();
db.close();
const app = new Application();
const router = new Router();
const getTestResponse = ({ response }) => {
    response.status = 200;
    response.headers.set("Content-Type", "application/json");
    response.body = {
        data: "test"
    };
};
router.get('/static/:path+', async (ctx) => {
    return await send(ctx, ctx.request.url.pathname, { root: Deno.cwd() });
});
router.get('/', (context) => {
    context.response.redirect("/static/index.html");
});
router.get("/data/", (context) => {
    context.response.status = 200;
    context.response.headers.set("Content-Type", "application/json");
    context.response.body = {
        data: "test"
    };
});
app.use(router.routes());
app.use(router.allowedMethods());
await app.listen({ port: 8000 });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsV0FBVyxFQUFpQixNQUFNLEVBQUUsSUFBSSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ2xFLE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUVyRCxNQUFNLEtBQUs7SUFDUCxFQUFFLENBQUM7SUFFSCxZQUFZLEVBQU87UUFDZixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDOzs7OzswQkFLSSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELE9BQU87UUFDSCxDQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFDO1lBQzVCLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFDO1lBQ2hDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQ2pDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FDckIsbURBQW1ELEVBQ25ELENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQ2pDLENBQ1IsQ0FBQztJQUNOLENBQUM7SUFFRCxVQUFVO1FBQ04sTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztRQUNoRSxLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQy9CO0lBQ0wsQ0FBQztDQUNKO0FBRUQsTUFBTSxFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDN0IsTUFBTSxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ2hCLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUNmLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUVYLE1BQU0sR0FBRyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7QUFDOUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztBQUM1QixNQUFNLGVBQWUsR0FBRyxDQUFDLEVBQUMsUUFBUSxFQUFvQixFQUFFLEVBQUU7SUFDdEQsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUE7SUFFckIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLGtCQUFrQixDQUFDLENBQUE7SUFDeEQsUUFBUSxDQUFDLElBQUksR0FBRztRQUNaLElBQUksRUFBRSxNQUFNO0tBQ2YsQ0FBQTtBQUNMLENBQUMsQ0FBQTtBQUNELE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLEdBQVksRUFBRSxFQUFFO0lBQ2hELE9BQU8sTUFBTSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUMsQ0FBQyxDQUFDO0FBQ3pFLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtJQUN4QixPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3BELENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtJQUM3QixPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUE7SUFDN0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFBO0lBRWhFLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHO1FBQ3BCLElBQUksRUFBRSxNQUFNO0tBQ2YsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtBQUN4QixHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO0FBRWpDLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDIn0=